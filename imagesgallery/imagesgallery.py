"""TO-DO: Write a description of what this XBlock is."""

import re
import os
import logging
import pkg_resources
import webpack_loader
from django.utils import translation
from django.views.decorators.csrf import csrf_exempt
from django.shortcuts import render
from django.utils.safestring import mark_safe
from django.http import HttpResponse
from django.template.loader import get_template
from xblock.core import XBlock
from xblock.fields import List, Integer, Scope
from xblock.fragment import Fragment
from xblockutils.resources import ResourceLoader

from django.conf import settings

from urllib.parse import urljoin
from http import HTTPStatus

from webob.response import Response

from openedx.core.djangoapps.site_configuration import helpers as configuration_helpers

from .utils import LoadStatic

log = logging.getLogger(__name__)
loader = ResourceLoader(__name__)

class ImagesGalleryXBlock(XBlock):
    """
    TO-DO: document what your XBlock does.
    """

    # Fields are defined on the class.  You can access them in your code as
    # self.<fieldname>.

    # TO-DO: delete count, and define your own fields.
    contents = List(
        display_name="Static contents uploaded by the instructor.",
        default=[],
        scope=Scope.settings,
    )

    current_page = Integer(
        display_name="Current page",
        default=0,
        scope=Scope.user_state,
    )

    page_size = Integer(
        display_name="Page size",
        default=10,
        scope=Scope.settings,
    )

    def resource_string(self, path):
        """Handy helper for getting resources from our kit."""
        data = pkg_resources.resource_string(__name__, path)
        return data.decode("utf8")

    # TO-DO: change this view to display your data your own way.
    def student_view(self, context=None):
        """
        The primary view of the ImagesGalleryXBlock, shown to students
        when viewing courses.
        """
        if context:
            pass  # TO-DO: do something based on the context.

        # Remove the bundle default generated by webpack
        script_to_remove = r'<script defer="defer" src="bundle.js"></script>'

        html = self.resource_string("static/html/empty.html")
        html_without_script = re.sub(script_to_remove, '', html)
        frag = Fragment(html_without_script.format(self=self))
        frag.add_css(self.resource_string("static/css/imagesgallery.css"))

        # Add i18n js
        statici18n_js_url = self._get_statici18n_js_url()
        if statici18n_js_url:
            frag.add_javascript_url(self.runtime.local_resource_url(self, statici18n_js_url))

        # Adding the correct route of the bundle
        #frag.add_javascript(self.resource_string("static/html/bundle.js"))
        #frag.initialize_js('ImagesGalleryXBlock')
        return frag

    def render_template(self, template_path, context=None) -> str:
        """
        Render a template with the given context. The template is translated
        according to the user's language.

        Args:
            template_path (str): The path to the template
            context(dict, optional): The context to render in the template

        Returns:
            str: The rendered template
        """
        return loader.render_django_template(
            template_path, context, i18n_service=self.runtime.service(self, 'i18n')
        )

    def get_js_script(self):
        # Construct the path to the JavaScript file
        BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        jsfiles_directory = os.path.join(BASE_DIR, 'static/html')
        js_file_path = os.path.join(jsfiles_directory, 'bundle.js')

        try:
            # Read the content of the JavaScript file
            with open(js_file_path, 'r') as js_file:
                js_script = js_file.read()

            # Create a Fragment to include the JavaScript content
            fragment = Fragment()
            fragment.add_content(js_script)
            print(f'js_script *** {js_script}')
            fragment.initialize_js('ImagesGalleryXBlockEdit')
            return HttpResponse("<h1>Page was found</h1>")

            #return fragment
        except FileNotFoundError:
            # Handle file not found error
            return HttpResponse("<h1>Page was found</h1>")


    def add_webpack_js_to_fragment(self, fragment, bundle_name):
        """
        Add all JS webpack chunks to the supplied fragment.
        """
        for chunk in webpack_loader.utils.get_files(bundle_name, None, 'DEFAULT'):
            if chunk['name'].endswith(('.js', '.js.gz')):
                fragment.add_javascript_url(chunk['url'])


    def read_js_file(self):
        """
         Read a JS file and  return the content as a string
        """
        BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        jsfiles_directory = os.path.join(BASE_DIR, 'static/js')
        js_file_path = os.path.join(jsfiles_directory, 'bundle.js')

        try:
            with open(js_file_path, 'r') as js_file:
                js_script = js_file.read()
            return js_script
        except FileNotFoundError:
            return None


    def studio_view(self, context=None) -> Fragment:
        """
        The studio view of the ImagesGalleryXBlock, shown to instructors.

        Args:
            context (dict, optional): Context for the template. Defaults to None.

        Returns:
            Fragment: The fragment to render
        """

        # Trying to read the JS file and put it into the view
        fragment = Fragment()
        fragment.add_content(self.render_template(f"static/html/edit.html", context))

        statici18n_js_url = self._get_statici18n_js_url()
        if statici18n_js_url:
            fragment.add_javascript_url(self.runtime.local_resource_url(self, statici18n_js_url))

        # Read the JavaScript file content
        js_script = self.read_js_file()

        if js_script:
            # Add the JavaScript content to the fragment
            fragment.add_javascript(js_script)

        fragment.initialize_js('ImagesGalleryXBlock')
        return fragment

        # Trying to put the content as safe block in the fragment

        #context = {
        #    'my_safe_string': mark_safe("""
        #        <script defer="defer" src="/static/html/bundle.js"></script>
        #        <div id="images-gallery-app-root-2"></div>
        #    """),
        #}

        #file_name = "edit"
        #fragment = Fragment()
        #fragment.add_content(self.render_template(f"static/html/{file_name}.html", context))

        #statici18n_js_url = self._get_statici18n_js_url()
        #if statici18n_js_url:
        #    frag.add_javascript_url(self.runtime.local_resource_url(self, statici18n_js_url))

        #return fragment


    @XBlock.handler
    def file_upload(self, request, suffix=''):
        """Handler for file upload to the course assets."""
        # Importing here to avoid circular imports
        from cms.djangoapps.contentstore.views.assets import update_course_run_asset

        for _, file in request.params.items():
            try:
                content = update_course_run_asset(self.course_id, file.file)
                self.serialize_contents(content)
            except Exception as e:
                log.exception(e)
                return Response(status=HTTPStatus.INTERNAL_SERVER_ERROR)
        return Response(status=HTTPStatus.OK, json_body=self.get_paginated_contents())

    def serialize_contents(self, content):
        """
        Serializes the content object to a dictionary and appends it to the
        contents list.
        """
        from xmodule.contentstore.content import StaticContent

        asset_url = StaticContent.serialize_asset_key_with_slash(content.location)
        thumbnail_url = StaticContent.serialize_asset_key_with_slash(content.thumbnail_location)
        self.contents = self.contents + [{
            "id": str(content.get_id()),
            "display_name": content.name,
            "url": str(asset_url),
            "content_type": content.content_type,
            "file_size": content.length,
            "external_url": urljoin(configuration_helpers.get_value('LMS_ROOT_URL', settings.LMS_ROOT_URL), asset_url),
            "thumbnail": urljoin(configuration_helpers.get_value('LMS_ROOT_URL', settings.LMS_ROOT_URL), thumbnail_url),
        }]

    def get_paginated_contents(self):
        """
        Returns the contents list.
        """
        return self.contents[self.current_page * self.page_size: (self.current_page + 1) * self.page_size]

    @XBlock.json_handler
    def get_files(self, data, suffix=''):
        """Handler for getting images from the course assets."""
        self.current_page = int(data.get("current_page", self.current_page))
        return {
            "files": self.get_paginated_contents(),
            "total_count": len(self.contents),
        }

    # TO-DO: change this to create the scenarios you'd like to see in the
    # workbench while developing your XBlock.
    @staticmethod
    def workbench_scenarios():
        """A canned scenario for display in the workbench."""
        return [
            ("ImagesGalleryXBlock",
             """<imagesgallery/>
             """),
            ("Multiple ImagesGalleryXBlock",
             """<vertical_demo>
                <imagesgallery/>
                <imagesgallery/>
                <imagesgallery/>
                </vertical_demo>
             """),
        ]

    @staticmethod
    def _get_statici18n_js_url():
        """
        Returns the Javascript translation file for the currently selected language, if any.
        Defaults to English if available.
        """
        locale_code = translation.get_language()
        if locale_code is None:
            return None
        text_js = 'public/js/translations/{locale_code}/text.js'
        lang_code = locale_code.split('-')[0]
        for code in (locale_code, lang_code, 'en'):
            loader = ResourceLoader(__name__)
            if pkg_resources.resource_exists(
                    loader.module_name, text_js.format(locale_code=code)):
                return text_js.format(locale_code=code)
        return None

    @staticmethod
    def get_dummy():
        """
        Dummy method to generate initial i18n
        """
        return translation.gettext_noop('Dummy')
